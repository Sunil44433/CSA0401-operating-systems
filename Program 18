#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 3

int buffer[BUFFER_SIZE];
int buffer_count = 0;

sem_t empty;
sem_t full;
pthread_mutex_t mutex;

void *producer(void *param) {
    int item, i;
    for (i = 0; i < 4; ++i) {
        item = i;
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);

        buffer[buffer_count++] = item;
        printf("Producer produced item: %d\n", item);

        pthread_mutex_unlock(&mutex);
        sem_post(&full);
        sleep(1);
    }
}

void *consumer(void *param) {
    int item, i;
    for (i = 0; i < 1; ++i) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);

        item = buffer[--buffer_count];
        printf("Consumer consumed item: %d\n", item);

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
    }
}

int main() {
    pthread_t producer_thread, consumer_thread;
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    pthread_create(&consumer_thread, NULL, consumer, NULL);
    sleep(1);
    pthread_create(&producer_thread, NULL, producer, NULL);

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
